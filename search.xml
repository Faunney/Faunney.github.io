<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【工具】tmux基本使用</title>
    <url>/2025/04/14/%E3%80%90%E5%B7%A5%E5%85%B7%E3%80%91tmux%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>例如：<br>在服务器上跑一些耗时的程序或下载一些大文件，ssh断开的时候也希望持续执行任务。</p>
<p>此时可以用tmux开一个新的终端会话（session），只要服务器不关机且不关闭该会话，不管断开多长时间都可以再次访问到这个会话。</p>
<h1 id="下载tmux"><a href="#下载tmux" class="headerlink" title="下载tmux"></a>下载tmux</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install tmux	<span class="comment">#Ubuntu</span></span><br><span class="line"></span><br><span class="line">sudo yum install tmux	<span class="comment">#CentOS</span></span><br><span class="line"></span><br><span class="line">brew install tmux	<span class="comment">#MacOS</span></span><br></pre></td></tr></table></figure>
<h1 id="tmux基本命令"><a href="#tmux基本命令" class="headerlink" title="tmux基本命令"></a>tmux基本命令</h1><h2 id="1-创建tmux新会话"><a href="#1-创建tmux新会话" class="headerlink" title="1. 创建tmux新会话"></a>1. 创建tmux新会话</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux new -s [session_name]</span><br></pre></td></tr></table></figure>
<h2 id="2-暂时退出当前tmux会话窗口"><a href="#2-暂时退出当前tmux会话窗口" class="headerlink" title="2. 暂时退出当前tmux会话窗口"></a>2. 暂时退出当前tmux会话窗口</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux detach</span><br></pre></td></tr></table></figure>
<h2 id="3-查看当前所有tmux会话"><a href="#3-查看当前所有tmux会话" class="headerlink" title="3. 查看当前所有tmux会话"></a>3. 查看当前所有tmux会话</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<h2 id="4-再次打开tmux会话"><a href="#4-再次打开tmux会话" class="headerlink" title="4. 再次打开tmux会话"></a>4. 再次打开tmux会话</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux a -t [session_name]</span><br></pre></td></tr></table></figure>
<h2 id="5-关闭tmux会话"><a href="#5-关闭tmux会话" class="headerlink" title="5. 关闭tmux会话"></a>5. 关闭tmux会话</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux kill-session -t [session_name]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>【论文笔记】3DGS精读</title>
    <url>/2024/09/21/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%913DGS%E7%B2%BE%E8%AF%BB/</url>
    <content><![CDATA[<p><strong>3D Gaussian Splatting for Real-Time Radiance Field Rendering 论文精读笔记</strong><br><br></p>
<p>项目网页链接：<a href="https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/">https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/</a></p>
<p>论文链接：<a href="https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/3d_gaussian_splatting_high.pdf">https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/3d_gaussian_splatting_high.pdf</a></p>
<p>源代码链接：<a href="https://github.com/graphdeco-inria/gaussian-splatting?tab=readme-ov-file">https://github.com/graphdeco-inria/gaussian-splatting?tab=readme-ov-file</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>contributions：</strong></p>
<ol>
<li>提出<strong>各向异性的3D高斯</strong>作为辐射场的高质量、非结构化表示</li>
<li>提出3D高斯属性的优化方法，以及<strong>自适应密度控制</strong>（为高质量表达场景）</li>
<li>提出的算法<strong>适应快速GPU计算</strong>（cuda kernel）的方法，支持各向异性高斯的泼溅和快速的反向传播算法执行，快速生成新视角（*重要）</li>
</ol>
<p>1+2 优化场景的算法</p>
<p>3 优化渲染速度的方法</p>
<h1 id="3DGS"><a href="#3DGS" class="headerlink" title="3DGS"></a>3DGS</h1><h2 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h2><p>输入：一组静态照片+<strong>SfM估计的相机姿态与点云</strong></p>
<p>选用高斯原因：各向异性体积可用于紧凑地表示精细结构</p>
<p>用点云初始化高斯:</p>
<p><strong>高斯性质：mean（位置），covariance（形状），opacity（不透明度）</strong></p>
<p>各向异性的颜色可用<strong>球谐函数（SH）</strong>表示</p>
<p>通过<strong>3dgs优化参数+高斯密度的自适应控制操作</strong>来创建可以表示场景的辐射场</p>
<p><strong>提速</strong>的关键：<strong>Gaussians用GPU快排</strong></p>
<p>流程图：</p>
<p><img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="截屏2024-09-19 23.39.18.png"></p>
<h2 id="可微的3dgs（构建高斯）"><a href="#可微的3dgs（构建高斯）" class="headerlink" title="可微的3dgs（构建高斯）"></a>可微的3dgs（构建高斯）</h2><p>为什么选择Gaussians：可微+方便投影成2D（可以快速α混合）</p>
<p>3D Gaussian公式：</p>
<p><img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/3dgs%E5%85%AC%E5%BC%8F.png" alt="公式1.png"></p>
<p>PS：x为坐标矩阵；Σ为协方差矩阵，隐式地包含了mean（μ）信息</p>
<p>混合时G(x)乘以α（不透明度）</p>
<p>投影公式：</p>
<p><img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/%E6%8A%95%E5%BD%B1%E5%85%AC%E5%BC%8F.png" alt="公式1.png"></p>
<!-- $$
\sum ' = J W \; \Sigma \; W ^ { T } \; J ^ { T }
$$ -->

<p>因<strong>协方差矩阵中的数据有范围限制</strong>，梯度下降算法易更新出无效协方差矩阵。</p>
<p>解决方法：</p>
<p>高斯可以<strong>类椭球</strong>，用梯度下降<strong>改“Σ”→用梯度下降改“椭球3r+scale+rotate”</strong></p>
<p>scaling：3D vector s</p>
<p>rotation：四元数 q</p>
<h2 id="3dgs自适应密度控制优化（优化高斯）"><a href="#3dgs自适应密度控制优化（优化高斯）" class="headerlink" title="3dgs自适应密度控制优化（优化高斯）"></a>3dgs自适应密度控制优化（优化高斯）</h2><p>不同位置3dgs密度不同 需要除点云初始化外的密度控制优化</p>
<p><strong>需优化：μ，Σ，α，SH；密度（前后二者相关联）</strong></p>
<ul>
<li><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>  用<strong>SGD</strong>（随机梯度下降）优化，支持定制的cuda kernel</p>
<p>  用<strong>sigmoid激活函数</strong>优化α，<strong>指数激活函数</strong>优化Σ的scale，以限制数据范围</p>
<p>  初始化Σ（正实数*identity matrix）使得高斯为<strong>各向同性高斯</strong>，即分布密度值仅与到均值距离有关、与方向无关</p>
<p>  以距离最近的三个点（SfM生成的点云）为标准生成初始化高斯</p>
<p>  用<strong>标准指数衰减调度</strong>优化μ</p>
<p>  生成图片对比目标图片的<strong>loss</strong>由<strong>D-SSIM</strong>（衡量两幅图片相似性的算法）得到：<br>  <img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/%E6%88%AA%E5%B1%8F2024-09-21%2017.30.39.png" alt="公式2.png"></p>
  <!-- $$
  \mathcal{L} = (1 - \lambda)\mathcal{L}_1 + \lambda\mathcal{L}_{D-SSIM}
  $$ -->
<p>  PS：实验中λ取0.2</p>
</li>
<li><h3 id="自适应高斯控制"><a href="#自适应高斯控制" class="headerlink" title="自适应高斯控制"></a>自适应高斯控制</h3><p>  用稀疏点云初始化出的高斯很稀疏，需控制单位体积中的高斯数量</p>
<p>  预优化后，每100次迭代densify一次，并<strong>删除所有α值小于一个极小阈值的高斯</strong></p>
<p>  关注<strong>高斯覆盖率极低（under-reconstruction）和单个高斯极大（over-reconstruction）</strong>的位置，因还原度低，此类位置<strong>视图-空间位置梯度</strong>很大</p>
<p>  因此设置<strong>视图-空间位置梯度阈值</strong>（实验中取0.0002），超过阈值则需densify，优化过程如下图：</p>
<p>  <img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/%E8%87%B4%E5%AF%86%E5%8C%96%E6%96%B9%E6%B3%95.png" alt="截屏2024-09-20 13.38.33.png"></p>
<p>  如图，对于欠重构处，<strong>克隆</strong>一个高斯并向位置梯度方向移动。</p>
<p>  对于过重构处，<strong>分裂</strong>该高斯。新高斯的scale因子由实验得到（实验中取1.6），位置由原高斯作为采样PDF来确定。</p>
<p>  在视图中占比过大的高斯可能由于距相机过近或本身过大，会定期被清除，以保证画面质量、控制高斯总数。</p>
</li>
</ul>
<h2 id="高斯的快速可微光栅化器（fast-3D→2D）"><a href="#高斯的快速可微光栅化器（fast-3D→2D）" class="headerlink" title="高斯的快速可微光栅化器（fast 3D→2D）"></a>高斯的快速可微光栅化器（fast 3D→2D）</h2><p>提速对象：投影渲染+高斯的快排（排相对视点的前后顺序，为了α混合）</p>
<h3 id="该光栅化器特点："><a href="#该光栅化器特点：" class="headerlink" title="该光栅化器特点："></a>该光栅化器特点：</h3><ol>
<li>为提速，先将所有高斯排序（距视点距离的顺序），再进行视角渲染；而非针对视角渲染的每个像素进行高斯排序</li>
<li>支持高效反向传播算法</li>
<li>内存占用小，每个像素固定占用一部分</li>
<li><strong>光栅化管线可微</strong>，可投影各向异性高斯</li>
</ol>
<h3 id="渲染管线："><a href="#渲染管线：" class="headerlink" title="渲染管线："></a>渲染管线：</h3><ol>
<li><p>将屏幕<strong>分成多个16*16像素的瓦片（tiles）</strong></p>
</li>
<li><p>进行<strong>视锥体剔除（frustum culling）</strong>，以确定在视图范围内的高斯（只保留与视锥体相交99%置信区间的高斯）</p>
<p> <img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/%E8%A7%86%E9%94%A5%E4%BD%93.png" alt="截屏2024-09-20 16.25.15.png"></p>
</li>
<li><p>再用一个<strong>防护带（guard band）</strong>去除位置过偏的高斯（eg. 过于靠后或过于靠近前剪裁面）</p>
</li>
<li><p>根据覆盖的瓦片数<strong>将每个高斯实例化</strong>，并给每个实例分配一个<strong>key</strong>，包含其<strong>在视图空间中的深度信息</strong>和<strong>覆盖的瓦片编号信息</strong></p>
</li>
<li><p>基于key，使用<strong>GPU上的高效基数排序（fast GPU Radix sort）</strong>对高斯进行排序；后续渲染都基于这个顺序（可能会有瑕疵，但微不足道，速度更重要）</p>
</li>
<li><p>根据顺序（通过识别相对当下视点的最近高斯与最远高斯）<strong>为每个瓦片生成高斯序列</strong>，并为<strong>每个瓦片启动一个线程块</strong> —— 即每一瓦片共享一序列，因此瓦片大小选择为重要指标</p>
</li>
<li><p>每一线程块将该瓦片对应的高斯序列加载进该块的<strong>共享存储器</strong>；对于块中每个像素，<strong>从前往后遍历共享序列进行α混合</strong>（最大化并行增益），<strong>累积至该像素的α达目标饱和度（唯一停止标准），停止遍历</strong></p>
</li>
<li><p>以一定频率检查线程块中每个线程情况，当16*16个像素都饱和，该线程块收束</p>
</li>
<li><p>渲染出图像后计算loss、反向传播、优化参数……</p>
<p> 特别地：</p>
<ul>
<li>此方法不限制接收梯度更新的基本体数量，因此可灵活处理各类场景，无需特别调整</li>
<li>反向传播时，为减少动态内存开销，从后至前再次遍历所在瓦片对应高斯序列</li>
<li>α代表该高斯对像素颜色的影响程度，因此可以决定该高斯从loss得到多少梯度指令</li>
</ul>
</li>
</ol>
<h1 id="结果和总结"><a href="#结果和总结" class="headerlink" title="结果和总结"></a>结果和总结</h1><h2 id="结果评估"><a href="#结果评估" class="headerlink" title="结果评估"></a>结果评估</h2><p>pros：训练速度快，效果好</p>
<p>cons：内存占用大（高斯太多（eg. 200k~500k），每个高斯的参数也多）</p>
<p>尤其对比Nerf</p>
<p><img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/%E7%BB%93%E6%9E%9C%E5%AF%B9%E6%AF%94.png" alt="截屏2024-09-21 10.22.37.png"></p>
<h2 id="消融实验（ablation-study）"><a href="#消融实验（ablation-study）" class="headerlink" title="消融实验（ablation study）"></a>消融实验（ablation study）</h2><p>即评估不同条件&#x2F;参数等因素对于结果的影响的实验</p>
<ul>
<li><h3 id="关于SfM"><a href="#关于SfM" class="headerlink" title="关于SfM"></a>关于SfM</h3><p>  实验对比了 <strong>用随机抽样初始化高斯 和 用SfM点云初始化高斯</strong> 得出的结果：</p>
<p>  <img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/SfM%E5%AF%B9%E6%AF%94.png" alt="截屏2024-09-21 11.16.15.png"></p>
<p>  渲染结果大体都不错，但前者会有画面细节问题，可能是由于有无法删除的漂浮物。</p>
<p>  PS：SfM仅为一种估计方法，无法达到准确程度，后续研究若有更好方式，会提升效果。</p>
</li>
<li><h3 id="关于致密化（Densification）"><a href="#关于致密化（Densification）" class="headerlink" title="关于致密化（Densification）"></a><strong>关于致密化（Densification）</strong></h3><p>  实验对比了 <strong>通过克隆控制密度</strong>、<strong>通过分裂控制密度</strong> 和 <strong>通过克隆&amp;分裂控制密度</strong>（见2.3） 三种密度控制方式的结果：</p>
<p>  <img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/%E8%87%B4%E5%AF%86%E5%8C%96%E5%AF%B9%E6%AF%94.png" alt="截屏2024-09-21 11.20.44.png"></p>
<p>  只克隆可能会出现类似迷雾的画面表现，只分裂可能会丢失细节，结合起来效果最好。</p>
</li>
<li><h3 id="对接收梯度的高斯数限制（靠后的高斯是否要变）"><a href="#对接收梯度的高斯数限制（靠后的高斯是否要变）" class="headerlink" title="对接收梯度的高斯数限制（靠后的高斯是否要变）"></a>对接收梯度的高斯数限制（靠后的高斯是否要变）</h3><p>  因后面的高斯对像素影响小（即使其α值较高），且不考虑靠后高斯可以提速，实验对比了 <strong>限制每个像素只有靠前的10个高斯接收梯度（左）</strong> 和 <strong>前文所述方法（右）</strong> 所得结果：</p>
<p>  <img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/%E5%89%8D10%E4%B8%AA%E9%AB%98%E6%96%AF%E5%AF%B9%E6%AF%94.png" alt="截屏2024-09-21 12.08.44.png"></p>
<p>  限制靠后高斯的调整对最终效果是有影响的。这可能说明靠前高斯们的α值都不大，不足以覆盖靠后的高斯发挥作用。</p>
</li>
<li><h3 id="关于各向异性协方差"><a href="#关于各向异性协方差" class="headerlink" title="关于各向异性协方差"></a>关于各向异性协方差</h3><p>  实验对比了 <strong>使用各向异性协方差矩阵定义高斯</strong> 和 <strong>使用各向同性的一个r</strong>（减小内存占用）定义高斯 所得结果：</p>
<p>  <img src="/../img/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/%E5%90%84%E5%90%91%E5%BC%82%E6%80%A7%E5%AF%B9%E6%AF%94.png" alt="截屏2024-09-21 12.48.02.png"></p>
<p>  对比表明使用各向异性协方差矩阵图像呈现效果确实更好。</p>
</li>
<li><h3 id="关于球谐函数"><a href="#关于球谐函数" class="headerlink" title="关于球谐函数"></a>关于球谐函数</h3><p>  球谐函数的引入提高不同视角渲染质量</p>
</li>
</ul>
<h2 id="不足（技术不足与效果不足）"><a href="#不足（技术不足与效果不足）" class="headerlink" title="不足（技术不足与效果不足）"></a>不足（技术不足与效果不足）</h2><ol>
<li>未充分观察到的区域中会有<strong>artifacts（瑕疵、错误）</strong>（可能由于SfM初始化）</li>
<li>某些区域会生成错误的长条形或“斑点状”的高斯</li>
<li>实时渲染中可能会出错，体积大的高斯突然霸屏等（可能由于防护带草率地拒绝了部分高斯）</li>
<li>过于简单的可见性算法</li>
<li>未使用针对loss的正则化（添加惩罚项以防止模型过拟合）</li>
<li>内存占用大（待优化）</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>3dgs是第一个用辐射场实现实时渲染的方法。</p>
<p>目前<strong>只有光栅化例程在优化的cuda kernel中实现</strong>，我们期望剩余的优化也可以移植到cuda中。</p>
<p><strong>mesh（网格）</strong>在应用领域中占重要分量，因传统方法渲染更快，市场份额占比极大。因此将3dgs技术生成的高斯转为游戏制作等场景中需要的网格也是重要研究方向。</p>
<p>此文中没有呈现的<strong>3D高斯分布可视化展示</strong>，对理解高斯的规律、优化算法，可能有很大帮助。</p>
]]></content>
      <categories>
        <category>论文笔记</category>
      </categories>
      <tags>
        <tag>CG</tag>
        <tag>paper</tag>
        <tag>neural-rendering</tag>
      </tags>
  </entry>
  <entry>
    <title>【闲聊】first_publish</title>
    <url>/2024/05/17/%E3%80%90%E9%97%B2%E8%81%8A%E3%80%91first-publish/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>暂时装修完啦 欢迎访问 ᥫ᭡ˎˊ-</p>
<h1 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h1><h2 id="1-创建新博客"><a href="#1-创建新博客" class="headerlink" title="1. 创建新博客"></a>1. 创建新博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [blog_name]    <span class="comment"># 创建新博客</span></span><br></pre></td></tr></table></figure>
<h2 id="2-编辑博客"><a href="#2-编辑博客" class="headerlink" title="2. 编辑博客"></a>2. 编辑博客</h2><p>进行markdown编辑…<br>新博客默认路径：<code>source/_posts/[blog_name].md</code></p>
<h2 id="3-发布博客"><a href="#3-发布博客" class="headerlink" title="3. 发布博客"></a>3. 发布博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s  <span class="comment"># 可跳过</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>闲聊</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
